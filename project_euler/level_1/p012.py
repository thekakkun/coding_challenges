import time

start_time = time.time()


def p012(n):
    """Highly divisible triangular number

    Problem 12

    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
    """

    i = 1
    while True:
        triangle_number = i * (i + 1) // 2
        if num_divisors(triangle_number) > n:
            return triangle_number
        else:
            i += 1


def num_divisors(n):
    divisors = 2
    i = 2

    while i**2 <= n:
        if n % i == 0:
            if i ** 2 == n:
                divisors += 1
            else:
                divisors += 2
        i += 1

    return divisors


print(p012(5))
print(p012(500))
print('Completed in', time.time() - start_time, 'seconds')
