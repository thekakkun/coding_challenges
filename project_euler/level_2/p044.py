import time
from math import ceil, sqrt

start_time = time.time()


def p044():
    """Pentagon numbers

    Problem 44

    Pentagonal numbers are generated by the formula, P_n=n(3n−1)/2. The first ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

    It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8. However, their difference, 70 − 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |P_k − P_j| is minimised; what is the value of D?
    """

    j, k = 1, 2
    min_d = 1e10
    max_k = 1e10

    while True:
        p_j, p_k = j * (3 * j - 1) // 2, k * (3 * k - 1) // 2

        if p_k - p_j < min_d:
            if is_pentagon(p_j + p_k):
                if is_pentagon(p_k - p_j):
                    if min_d > p_k - p_j:
                        min_d = p_k - p_j
                        max_k = ceil((min_d + 4) / 6)
                        print(f'p_{k} - p_{j} = {p_k - p_j}')
        else:
            k += 1
            j = k - 1
            print(f'k = {k}')
            continue

        j -= 1
        if j == 0:
            k += 1
            j = k - 1
            print(f'k = {k}')

        if k == max_k:
            break

    return min_d


def is_pentagon(n):
    if n < 1:
        return False

    i = ceil(sqrt(2 * n / 3))

    if n == i * (3 * i - 1) // 2:
        return True
    else:
        return False


print(p044())
print('Completed in', time.time() - start_time, 'seconds')
