import unittest

import day_20


test_input

#..#.
#....
##..#
..#..
..###'''


class TestDay20(unittest.TestCase):
    def test_parse_input(self):
        self.assertEqual(
            day_20.parse_input(test_input),
            (
                (0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
                 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1),
                ((1, 0, 0, 1, 0),
                 (1, 0, 0, 0, 0),
                 (1, 1, 0, 0, 1),
                 (0, 0, 1, 0, 0),
                 (0, 0, 1, 1, 1))
            )
        )

    def test_enhance(self):
        test_algo, test_img = day_20.parse_input(test_input)
        self.assertEqual(
            day_20.enhance(test_algo, test_img, 1),
            ((0, 1, 1, 0, 1, 1, 0),
             (1, 0, 0, 1, 0, 1, 0),
             (1, 1, 0, 1, 0, 0, 1),
             (1, 1, 1, 1, 0, 0, 1),
             (0, 1, 0, 0, 1, 1, 0),
             (0, 0, 1, 1, 0, 0, 1),
             (0, 0, 0, 1, 0, 1, 0))
        )
        self.assertEqual(
            day_20.enhance(test_algo, test_img, 2),
            ((0, 0, 0, 0, 0, 0, 0, 1, 0),
             (0, 1, 0, 0, 1, 0, 1, 0, 0),
             (1, 0, 1, 0, 0, 0, 1, 1, 1),
             (1, 0, 0, 0, 1, 1, 0, 1, 0),
             (1, 0, 0, 0, 0, 0, 1, 0, 1),
             (0, 1, 0, 1, 1, 1, 1, 1, 0),
             (0, 0, 1, 0, 1, 1, 1, 1, 1),
             (0, 0, 0, 1, 1, 0, 1, 1, 0),
             (0, 0, 0, 0, 1, 1, 1, 0, 0))
        )

    def test_count_lights(self):
        test_algo, test_img = day_20.parse_input(test_input)
        
        test_img_2 = day_20.enhance(test_algo, test_img, 2)
        self.assertEqual(day_20.count_lights(test_img_2), 35)

        test_img_50 = day_20.enhance(test_algo, test_img, 50)
        self.assertEqual(day_20.count_lights(test_img_50), 3351)


if __name__ == '__main__':
    unittest.main()
